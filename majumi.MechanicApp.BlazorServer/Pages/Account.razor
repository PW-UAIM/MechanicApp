@page "/account"
@using majumi.CarService.MechanicsAppService.Rest.Model;
@inject IController controller
@inject IModel model
@inject NavigationManager NavManager
@inject DialogService DialogService
<h2>Account Page</h2>
<RadzenDialog />
<RadzenDataGrid style="height: 335px" @ref="carGrid" IsLoading=@isCarGridLoading Count="@carGridCount" Data="@cars" LoadData="@LoadCarData" TItem="CarData">
    <Columns>
		<RadzenDataGridColumn TItem="CarData" Property="CarID" Title="CarID"/>
		<RadzenDataGridColumn TItem="CarData" Property="ClientID" Title="ClientID"/>
		<RadzenDataGridColumn TItem="CarData" Property="Make" Title="Make"/>
		<RadzenDataGridColumn TItem="CarData" Property="Model" Title="Model"/>
		<RadzenDataGridColumn TItem="CarData" Property="EngineSize" Title="EngineSize"/>
		<RadzenDataGridColumn TItem="CarData" Property="LicensePlate" Title="LicensePlate"/>
		<RadzenDataGridColumn TItem="CarData" Property="Mileage" Title="Mileage"/>
		<RadzenDataGridColumn TItem="CarData" Property="VIN" Title="VIN"/>
		<RadzenDataGridColumn TItem="CarData" Property="Year" Title="Year" />
    </Columns>
</RadzenDataGrid>
@code {
    RadzenDataGrid<CarData> carGrid;
    IEnumerable<CarData> cars;
    int carGridCount;
    bool isCarGridLoading = false;

    protected override void OnInitialized()
	{
		//Check if client is logged in
		if (model.MechanicID == 0 || model.LoginConfirmation == false)
		{
			NavManager.NavigateTo("/login");
		}
	}

    async Task LoadCarData(LoadDataArgs args)
    {
        isCarGridLoading = true;

        await controller.LoadCarsAsync();
        cars = model.CarList;
        carGridCount = cars.Count();
        isCarGridLoading = false;
    }

}

<RadzenDialog />
<RadzenScheduler @ref=@scheduler SlotRender=@OnSlotRender style="height: 768px;" TItem="VisitData" Data=@model.VisitList StartProperty="ServiceDate" EndProperty="ServiceDate"
                 TextProperty="ServiceType" SelectedIndex="0"
                 AppointmentSelect=@OnAppointmentSelect AppointmentRender=@OnAppointmentRender>
    <RadzenDayView/>
</RadzenScheduler>
@code {
    RadzenScheduler<VisitData> scheduler;

    private async Task LoadVisits()
    {
        //model.MechanicID = 1;
        await controller.LoadVisitsAsync();
        Console.WriteLine(model.VisitList.Count);
        await scheduler.Reload();
    }

    protected async override Task OnInitializedAsync()
    {
        await LoadVisits();
    }


    void OnSlotRender(SchedulerSlotRenderEventArgs args)
    {
        // Highlight today in month view
        if (args.View.Text == "Month" && args.Start.Date == DateTime.Today)
        {
            args.Attributes["style"] = "background: rgba(255,220,40,.2);";
        }

        // Highlight working hours (8-20)
        if ((args.View.Text == "Week" || args.View.Text == "Day") && args.Start.Hour >= 8 && args.Start.Hour <= 20)
        {
            args.Attributes["style"] = "background: rgba(255,220,40,.2);";
        }
    }

    async Task OnAppointmentSelect(SchedulerAppointmentSelectEventArgs<VisitData> args)
    {
        Console.WriteLine("Press");
        model.SearchedVisitID = args.Data.VisitID;
        await controller.GetVisitAsync();
        await DialogService.OpenAsync<ShowVisit>("Visit details");

        await scheduler.Reload();
    }

    void OnAppointmentRender(SchedulerAppointmentRenderEventArgs<VisitData> args)
    {
        //if (args.Data.Text == "Birthday")
        //{
        //    args.Attributes["style"] = "background: red";
        //}
    }

}
